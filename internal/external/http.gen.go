// Package external provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package external

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// Defines values for RecordReqType.
const (
	RecordReqTypeA RecordReqType = "A"

	RecordReqTypeAAAA RecordReqType = "AAAA"

	RecordReqTypeCAA RecordReqType = "CAA"

	RecordReqTypeCNAME RecordReqType = "CNAME"

	RecordReqTypeDNSKEY RecordReqType = "DNSKEY"

	RecordReqTypeIPSECKEY RecordReqType = "IPSECKEY"

	RecordReqTypeKEY RecordReqType = "KEY"

	RecordReqTypeMX RecordReqType = "MX"

	RecordReqTypeNS RecordReqType = "NS"

	RecordReqTypePTR RecordReqType = "PTR"

	RecordReqTypeSPF RecordReqType = "SPF"

	RecordReqTypeSRV RecordReqType = "SRV"

	RecordReqTypeTLSA RecordReqType = "TLSA"

	RecordReqTypeTXT RecordReqType = "TXT"
)

// Defines values for RecordResType.
const (
	RecordResTypeA RecordResType = "A"

	RecordResTypeAAAA RecordResType = "AAAA"

	RecordResTypeCAA RecordResType = "CAA"

	RecordResTypeCNAME RecordResType = "CNAME"

	RecordResTypeDNSKEY RecordResType = "DNSKEY"

	RecordResTypeIPSECKEY RecordResType = "IPSECKEY"

	RecordResTypeKEY RecordResType = "KEY"

	RecordResTypeMX RecordResType = "MX"

	RecordResTypeNS RecordResType = "NS"

	RecordResTypePTR RecordResType = "PTR"

	RecordResTypeSPF RecordResType = "SPF"

	RecordResTypeSRV RecordResType = "SRV"

	RecordResTypeTLSA RecordResType = "TLSA"

	RecordResTypeTXT RecordResType = "TXT"
)

// GeneralRes defines model for general-res.
type GeneralRes struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// RecordReq defines model for record-req.
type RecordReq struct {
	Name  string        `json:"name"`
	Type  RecordReqType `json:"type"`
	Value string        `json:"value"`
}

// RecordReqType defines model for RecordReq.Type.
type RecordReqType string

// RecordRes defines model for record-res.
type RecordRes struct {
	Id    string        `json:"id"`
	Name  string        `json:"name"`
	Type  RecordResType `json:"type"`
	Value string        `json:"value"`
}

// RecordResType defines model for RecordRes.Type.
type RecordResType string

// SoaRes defines model for soa-res.
type SoaRes struct {
	CacheTtl          int    `json:"cache_ttl"`
	Expire            int    `json:"expire"`
	Id                string `json:"id"`
	MailAddress       string `json:"mail_address"`
	Name              string `json:"name"`
	PrimaryNameServer string `json:"primary_name_server"`
	Refresh           int    `json:"refresh"`
	Retry             int    `json:"retry"`
	Serial            string `json:"serial"`
}

// ZoneRes defines model for zone-res.
type ZoneRes struct {
	Domain  string      `json:"domain"`
	Id      string      `json:"id"`
	Records []RecordRes `json:"records"`
	Soa     SoaRes      `json:"soa"`
}

// BadRequest defines model for bad-request.
type BadRequest GeneralRes

// DefaultError defines model for default-error.
type DefaultError GeneralRes

// NotFound defines model for not-found.
type NotFound GeneralRes

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /records/{domain})
	GetRecordsDomain(ctx echo.Context, domain string) error

	// (POST /records/{domain})
	PostRecordsDomain(ctx echo.Context, domain string) error

	// (DELETE /records/{domain}/{record_id})
	DeleteRecordsDomainRecordId(ctx echo.Context, domain string, recordId string) error

	// (GET /records/{domain}/{record_id})
	GetRecordsDomainRecordId(ctx echo.Context, domain string, recordId string) error

	// (PUT /records/{domain}/{record_id})
	PutRecordsDomainRecordId(ctx echo.Context, domain string, recordId string) error

	// (GET /zones)
	GetZones(ctx echo.Context) error

	// (POST /zones)
	PostZones(ctx echo.Context) error

	// (DELETE /zones/{domain})
	DeleteZonesDomain(ctx echo.Context, domain string) error

	// (GET /zones/{domain})
	GetZonesDomain(ctx echo.Context, domain string) error

	// (PUT /zones/{domain})
	PutZonesDomain(ctx echo.Context, domain string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRecordsDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecordsDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecordsDomain(ctx, domain)
	return err
}

// PostRecordsDomain converts echo context to params.
func (w *ServerInterfaceWrapper) PostRecordsDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRecordsDomain(ctx, domain)
	return err
}

// DeleteRecordsDomainRecordId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRecordsDomainRecordId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	// ------------- Path parameter "record_id" -------------
	var recordId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "record_id", runtime.ParamLocationPath, ctx.Param("record_id"), &recordId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter record_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteRecordsDomainRecordId(ctx, domain, recordId)
	return err
}

// GetRecordsDomainRecordId converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecordsDomainRecordId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	// ------------- Path parameter "record_id" -------------
	var recordId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "record_id", runtime.ParamLocationPath, ctx.Param("record_id"), &recordId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter record_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecordsDomainRecordId(ctx, domain, recordId)
	return err
}

// PutRecordsDomainRecordId converts echo context to params.
func (w *ServerInterfaceWrapper) PutRecordsDomainRecordId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	// ------------- Path parameter "record_id" -------------
	var recordId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "record_id", runtime.ParamLocationPath, ctx.Param("record_id"), &recordId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter record_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutRecordsDomainRecordId(ctx, domain, recordId)
	return err
}

// GetZones converts echo context to params.
func (w *ServerInterfaceWrapper) GetZones(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetZones(ctx)
	return err
}

// PostZones converts echo context to params.
func (w *ServerInterfaceWrapper) PostZones(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostZones(ctx)
	return err
}

// DeleteZonesDomain converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteZonesDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteZonesDomain(ctx, domain)
	return err
}

// GetZonesDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetZonesDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetZonesDomain(ctx, domain)
	return err
}

// PutZonesDomain converts echo context to params.
func (w *ServerInterfaceWrapper) PutZonesDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutZonesDomain(ctx, domain)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/records/:domain", wrapper.GetRecordsDomain)
	router.POST(baseURL+"/records/:domain", wrapper.PostRecordsDomain)
	router.DELETE(baseURL+"/records/:domain/:record_id", wrapper.DeleteRecordsDomainRecordId)
	router.GET(baseURL+"/records/:domain/:record_id", wrapper.GetRecordsDomainRecordId)
	router.PUT(baseURL+"/records/:domain/:record_id", wrapper.PutRecordsDomainRecordId)
	router.GET(baseURL+"/zones", wrapper.GetZones)
	router.POST(baseURL+"/zones", wrapper.PostZones)
	router.DELETE(baseURL+"/zones/:domain", wrapper.DeleteZonesDomain)
	router.GET(baseURL+"/zones/:domain", wrapper.GetZonesDomain)
	router.PUT(baseURL+"/zones/:domain", wrapper.PutZonesDomain)

}
